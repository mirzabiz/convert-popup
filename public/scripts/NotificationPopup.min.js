(async function () {
  function timeAgo(dateParam) {
    if (!dateParam) {
      return null;
    }

    const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam * 1000);
    const today = new Date();
    const seconds = Math.round((today - date) / 1000);
    const minutes = Math.round(seconds / 60);
    const hours = Math.round(minutes / 60);
    const days = Math.round(hours / 24);
    const months = Math.round(days / 30.416);  // Average days in a month
    const years = Math.round(days / 365);

    if (seconds < 60) {
      return `${seconds} seconds ago`;
    } else if (minutes < 60) {
      return `${minutes} minutes ago`;
    } else if (hours < 24) {
      return `${hours} hours ago`;
    } else if (days < 30) {
      return `${days} days ago`;
    } else if (months < 12) {
      return `${months} months ago`;
    } else {
      return `${years} years ago`;
    }
  }
  const positionStyles = {
    'bottom-right': 'bottom: 15px; right: 15px;',
    'bottom-left': 'bottom: 15px; left: 15px;',
    'top-right': 'top: 15px; right: 15px;',
    'top-left': 'top: 15px; left: 15px;',
  };

  // Function to get the right CSS text based on the position
  function getPositionStyle(position) {
    return positionStyles[position] || positionStyles['bottom-right']; // Default to bottom-right if undefined
  }
  var messages = dataToPass.transactionData;
  var configDic = dataToPass.configDic

  // CSS for animation
  var style = document.createElement('style');
  style.type = 'text/css';
  style.innerHTML = `
      @keyframes slideIn {
          0% { transform: translateX(100%); opacity: 0; }
          100% { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOut {
          0% { transform: translateX(0); opacity: 1; }
          100% { transform: translateX(100%); opacity: 0; }
      }
      .notification-popup {
          animation: slideIn 0.5s ease-out forwards, slideOut 0.5s 4.5s ease-in forwards;
          background-color: #FFFFFF; border: 1px solid #E0E0E0; border-radius: 8px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); z-index: 9999; font-family: Arial, sans-serif;
          display: flex; flex-direction: column; align-items: start; width: 280px;  height: 75px; padding-right: 12px; 
          box-sizing: border-box;
      }`;
  document.head.appendChild(style);

  function createNotification(index) {

    if (index >= messages.length) index = 0;  // Loop back to start if end is reached

    var config = messages[index];
    var container = document.createElement('div');
    container.className = 'notification-popup';
    container.style.cssText = `
    position: fixed;
    ${getPositionStyle(configDic.popupPosition)}
    padding: 16px;
    background-color: ${configDic.backgroundColor};
    border: 1px solid ${configDic.borderColor};
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 9999;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    max-height: 75px;
`;
    container.addEventListener('click', () => {
      window.open(`https://convertpopup.co/website/${configDic.url}`, '_blank');
    });
    var messageText = document.createElement('span');
    messageText.style.cssText = "color: " + configDic.accentColor + "; font-size: 15px; line-height: 1.25; white-space: nowrap; padding-right: 8px;";
    // Use regex to find the country name
    const regex = /in (\w+)/;
    const matches = config.message.match(regex);
    if (matches) {
      const beforeText = document.createTextNode(config.message.substring(0, matches.index + 3)); // "Someone in "
      const boldText = document.createElement('strong'); // Bold element for the country name
      boldText.textContent = matches[1]; // The country name, e.g., "US"
      const afterText = document.createTextNode(config.message.substring(matches.index + 3 + matches[1].length)); // " subscribed"

      // Append parts to the messageText element
      messageText.appendChild(beforeText);
      messageText.appendChild(boldText);
      messageText.appendChild(afterText);
    } else {
      // If no match, just display the message
      messageText.textContent = config.message;
    }

    var timeAgoText = document.createElement('span');
    timeAgoText.textContent = timeAgo(config.timeAgo) + " | ";
    timeAgoText.style.cssText = "color: " + configDic.textColor + "; font-size: 12px; margin-top: 2px; display: flex; align-items: center;";

    var verifiedText = document.createElement('span');
    verifiedText.innerHTML =
      `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="icon mr-1" style="margin-right: 2px; vertical-align: middle; width: 14px; height: 14px;" viewBox="0 0 24 24" data-v-e8d572f6="">
      <path fill=${configDic.accentColor} fill-rule="evenodd" d="M12.516 2.17a.75.75 0 0 0-1.032 0a11.2 11.2 0 0 1-7.877 3.08a.75.75 0 0 0-.722.515A12.7 12.7 0 0 0 2.25 9.75c0 5.942 4.064 10.933 9.563 12.348a.75.75 0 0 0 .374 0c5.499-1.415 9.563-6.406 9.563-12.348c0-1.39-.223-2.73-.635-3.985a.75.75 0 0 0-.722-.516l-.143.001c-2.996 0-5.717-1.17-7.734-3.08m3.094 8.016a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094z" clipRule="evenodd">
      </path></svg> Verified by`

    verifiedText.style.cssText = "color: " + configDic.textColor + "; font-size: 12px; display: flex; align-items: center; margin-left: 2px;";

    var logoImg = document.createElement('img');
    logoImg.src = 'https://lh3.googleusercontent.com/drive-viewer/AKGpihbZ5sIeCjM8uxqNsHdJf-2mLrmPsTU3y2GZQOYbZH52hLHCkGQk7nPnHU68PAUzBWgTapViZ7-c5upUEefiVNjUTvMJyBGtb8A=w3024-h1648';
    logoImg.alt = "Stripe logo";
    logoImg.style.cssText = "height: 19px; width: auto; display: inline; margin-left: 1px;";

    container.appendChild(messageText);
    container.appendChild(timeAgoText);
    verifiedText.appendChild(logoImg);
    timeAgoText.appendChild(verifiedText)

    document.body.appendChild(container);

    setTimeout(() => {
      document.body.removeChild(container);
      createNotification(index + 1);
    }, 5000);
  }

  if (!messages || messages.length === 0) {
    console.log('From the server: No transactions to display.');
  } else {
    createNotification(0);
  }
})();